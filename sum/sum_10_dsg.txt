

设计模式（Design pattern）
    是解决软件开发某些特定问题而提出的一些解决方案，也可以理解成解决问题的一些思路。

    通过 设计模式 可以帮助我们增强 代码 的 可重用性、可扩充性、 可维护性、灵活性好。

    使用 设计模式 最终的目的是实现 代码 的 高内聚 和 低耦合。






设计模式核心
    模式名称
        每个模式都会有一个自己的名字， 有的模式是用其作用命名， 有的是其特点、解决方案、要解决的问题等。基本上就是1到2个词组成

    问题
        问题描述了模式的应用环境，即在什么样一个情况下使用该模式。从数学的角度来说就是已知条件， 根据已知条件就能够得到数学模型（设计模式）从而解出结果（解决方案）。

    解决方案
        模式问题的解决方案包括设计的组成成分、它们之间的相互关系及各自的职责和协作方式。简答来说就是解体公式， 前面通过问题总结出了数学模型， 后面就会有对应的解题步骤， 到了这一步， 程序员只需要根据"解题步骤"就能够得到正确答案了。

    效果
        对前面的总结， 包括模式的优势， 缺点，需要改进的地方，灵活度， 扩展性等等各个方面。 对于模式解决的问题的各个指标进行评估。






23种设计模式 可以分为 三种类型
    
    创建型 - Creational, 5种
        对象实例化的模式，创建型模式用于解耦对象的实例化过程。

    结构型 - Constructal, 7种
        把类或对象结合在一起形成一个更大的结构。

    行为型 - Behavioral, 11种
        类和对象如何交互，及划分责任和算法。






23种设计模式

    创建型 - Creational, 5种
        对象实例化的模式，创建型模式用于解耦对象的实例化过程。
        
        Singleton, 单例
        FactoryMethod, 工厂方法
        AbstractFactory, 抽象工厂
        Prototype, 原型
        Builder, 建造者

    结构型 - Constructal, 7种
        把类或对象结合在一起形成一个更大的结构。

        Adapter, 适配
        Proxy, 代理
        Composite, 组合
        Decorator, 装饰
        Facade, 门面
        Bridge, 桥接
        Flyweight, 享元

    行为型 - Behavioral, 11种
        类和对象如何交互，及划分责任和算法。

        Observer, 观察者
        Iterator, 迭代器
        TemplateMethod, 模板方法
        ChainOfResponsibility, 责任链
        Strategy, 策略
        State, 状态
        Mediator, 调停者
        Command, 命令
        Memento, 备忘录
        Interpreter, 解析器
        Visitor, 访问







创建型 - Creational, 5种
    对象实例化的模式，创建型模式用于解耦对象的实例化过程。
    
    Singleton, 单例
        某个类在程序运行过程中只能有一个实例，提供一个全局的访问点。

    FactoryMethod, 工厂方法
        一个工厂类根据传入的参量决定创建出哪一种产品类的实例。

    AbstractFactory, 抽象工厂
        创建相关或依赖对象的家族，而无需明确指定具体类。

    Prototype, 原型
        封装一个复杂对象的创建过程，并可以按步骤构造。

    Builder, 建造者
        通过复制现有的实例来创建新的实例。






结构型 - Constructal, 7种
    把类或对象结合在一起形成一个更大的结构。

    Adapter, 适配
        将一个类的方法接口转换成客户希望的另一个接口。

    Proxy, 代理
        为其它对象提供一个代理以便控制这个对象的访问。

    Composite, 组合
        将对象组合成树形结构以表示“部分-整体”的层次结构。

    Decorator, 装饰
        动态的给对象添加新的功能。

    Facade, 门面
        对外提供一个统一的方法，来访问子系统中的一群接口。

    Bridge, 桥接
        将抽象部分和它的实现部分分离，使它们都可以独立的变化。

    Flyweight, 享元
        通过共享技术来有效的支持大量细粒度的对象。






行为型 - Behavioral, 11种
    类和对象如何交互，及划分责任和算法。

    Observer, 观察者
        对象间的一对多的依赖关系。

    Iterator, 迭代器
        一种遍历访问聚合对象中各个元素的方法，不暴露该对象的内部结构。

    TemplateMethod, 模板方法
        定义一个算法结构，而将一些步骤延迟到子类实现。

    ChainOfResponsibility, 责任链
        将请求的发送者和接收者解耦，使的多个对象都有处理这个请求的机会。

    Strategy, 策略
        定义一系列算法，把他们封装起来，并且使它们可以相互替换。
    
    State, 状态
        根据 状态 来 分离行为 和 选择行为，状态驱动

    Mediator, 调停者, 仲裁者
        用一个中介对象来封装一系列的对象交互。

    Command, 命令
        将命令请求封装为一个对象，使得可以用不同的请求来进行参数化。

    Memento, 备忘录
        在不破坏封装的前提下，保持对象的内部状态。

    Interpreter, 解析器
        给定一个语言，定义它的文法的一种表示，并定义一个解释器。

    Visitor, 访问
        不改变数据结构的前提下，增加作用于一组对象元素的新功能。

