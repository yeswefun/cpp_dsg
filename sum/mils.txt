‌设计模式主要分为三类：创建型、结构型和行为型‌，共包含23种经典模式。创建型模式关注对象实例化方式（如单例、工厂方法），结构型模式处理类与对象的组合（如适配器、代理），行为型模式定义对象间的交互与职责分配（如观察者、策略）。

‌设计模式的三大分类‌

‌创建型模式（5种）‌。
解决对象创建问题，隐藏实例化细节：

工厂方法模式：子类决定实例化哪个类。‌‌‌‌
抽象工厂模式：创建一组相关对象。‌‌
建造者模式：分步骤构建复杂对象。‌‌
原型模式：通过克隆生成新对象。‌‌
单例模式：确保全局唯一实例。‌‌‌‌



‌结构型模式（7种）‌。
处理类或对象的组合关系：

适配器模式：接口转换兼容。‌‌‌‌
桥接模式：抽象与实现解耦。‌‌
组合模式：树形层次结构管理。‌‌
装饰器模式：动态扩展功能。‌‌
外观模式：简化子系统调用。‌‌
享元模式：共享细粒度对象。‌‌
代理模式：控制对象访问。‌‌‌‌

‌行为型模式（11种）‌。
定义对象间通信与职责分配：

观察者模式：状态变更通知。‌‌‌‌
策略模式：算法灵活切换。‌‌‌‌
责任链模式：请求传递处理。‌‌
迭代器模式：统一集合访问。‌‌‌‌
其他：命令、状态、模板方法等。‌‌‌‌

‌分类补充说明‌
‌类模式与对象模式‌：工厂方法、适配器（类）等属于类模式，其余多为对象模式。‌‌
‌设计原则‌：多数模式遵循开闭原则、单一职责等，如装饰器模式符合开闭原则。‌‌



00 -> 05，创建型，5种
    工厂方法
    工厂
        简单工厂
        抽象工厂
    建造者
    单例
    原型

06 -> 12，结构型，7种
    适配器
        类适配
        对象适配
    装饰
    代理
        静态代理
        动态代理
    外观，门面
    桥接
    组合
    享元

13 -> 23，行为型，11种
    策略
    观察者
    责任链
    备忘录
    模板方法
    迭代器
    命令
    中介者
    访问者
    解释器
    状态



// 预处理
$ g++ -E test.cpp -o test.i

// 编译
$ g++ -S test.i -o test.s

// 汇编
$ g++ -c test.s -o test.o

// 链接
$ g++ test.o -o test.out




Tyrant: 暴君


注: 
    programing 和 programming 都可以
    regreting  和 regretting


临时
$ chcp 65001
    65001 -> utf8



system("chcp 65001");
cout << "你好世界" << endl;



//return "" + int(100); // error

template <class T>
string convertToString(T value) {
    stringstream ss;
    ss << value;
    return ss.str();
}

